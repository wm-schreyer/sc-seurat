# create object for pos population data
library(Seurat)
pos.data <- Read10X(data.dir = "pos_tsv")
pos.object <- CreateSeuratObject(counts = pos.data, project = "pos")
pos.object

# create object for neg population data
library(Seurat)
neg.data <- Read10X(data.dir = "neg_tsv")
neg.object <- CreateSeuratObject(counts = neg.data, project = "neg")
neg.object

# create object for uni population data
library(Seurat)
uni.data <- Read10X(data.dir = "uni_tsv")
uni.object <- CreateSeuratObject(counts = uni.data, project = "uni")
uni.object

# merge populations into one aggr object
aggr.object <- merge(pos.object, y = c(neg.object, uni.object), add.cell.ids = c("pos", "neg", "uni"), project = "aggr")
aggr.object

# calculate percentage of total transcripts from mt-genes
aggr.object[["percent.mt"]] <- PercentageFeatureSet(aggr.object, pattern = "^MT-")

# calculate percentage of total transcripts from rp-genes
aggr.object[["percent.rp"]] <- PercentageFeatureSet(aggr.object, pattern = "^RP")

# visualize QC metrics as a violin plot
VlnPlot(aggr.object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.rp"), ncol = 4, pt.size = 0.5)

# visualize QC metrics as a scatter plot
plot1 <- FeatureScatter(aggr.object, feature1 = "nFeature_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(aggr.object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot3 <- FeatureScatter(aggr.object, feature1 = "percent.rp", feature2 = "nFeature_RNA")
plot4 <- FeatureScatter(aggr.object, feature1 = "percent.rp", feature2 = "percent.mt")
plot5 <- FeatureScatter(aggr.object, feature1 = "percent.rp", feature2 = "nCount_RNA")
plot1 + plot2 + plot3

# create metadata for aggr object
aggr.object$log10GenesPerUMI <- log10(aggr.object$nFeature_RNA) / log10(aggr.object$nCount_RNA)

#create metadata data frame
metadata.aggr <- aggr.object@meta.data

# add cell IDs to metadata
metadata.aggr$cells <- rownames(metadata.aggr)

# load dplyr library
library(dplyr)

# rename columns
metadata.aggr <- metadata.aggr %>%
  dplyr::rename(seq_folder = orig.ident,
                nUMI = nCount_RNA,
                nGene = nFeature_RNA)

# Add metadata back to Seurat object
aggr.object@meta.data <- metadata.aggr

# visualize number transcripts/cell
metadata.aggr %>% 
  ggplot(aes(color=seq_folder, x=nUMI, fill=seq_folder)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  geom_vline(xintercept = 1000)

# Visualize the distribution of genes detected per cell via histogram
metadata.aggr %>% 
  ggplot(aes(color=seq_folder, x=nGene, fill=seq_folder)) + 
  geom_density(alpha = 0.2) + 
  theme_classic() +
  scale_x_log10() + 
  geom_vline(xintercept = 300)

# Visualize % MT transcripts
metadata.aggr %>% 
  ggplot(aes(color=seq_folder, x=percent.mt, fill=seq_folder)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  geom_vline(xintercept = 20)

# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
metadata.aggr %>% 
  ggplot(aes(x=nUMI, y=nGene, color=percent.mt)) + 
  geom_point() + 
  scale_colour_gradient(low = "gray90", high = "black") +
  stat_smooth(method=lm) +
  scale_x_log10() + 
  scale_y_log10() + 
  theme_classic() +
  geom_vline(xintercept = 500) +
  geom_hline(yintercept = 250) +
  facet_wrap(~seq_folder)

# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
metadata.aggr %>%
  ggplot(aes(x=log10GenesPerUMI, color=seq_folder, fill=seq_folder)) +
  geom_density(alpha = 0.2) +
  theme_classic() +
  geom_vline(xintercept = 0.75)

# Filter out low quality reads using selected thresholds - nGene filter sets min for unique features and UMI counts
aggr.filt <- subset(x = aggr.object, 
                subset = (nGene >= 300) &
                  (nGene <= 8000) &
                  (nUMI >= 500) &
                  (percent.mt < 20))

# Output a logical vector for every gene on whether the more than zero counts per cell
# Extract counts
counts.aggr <- GetAssayData(object = aggr.filt, slot = "counts")

# Output a logical vector for every gene on whether the more than zero counts per cell
nonzero.aggr <- counts.aggr > 0

# Sums all TRUE values and returns TRUE if more than 10 TRUE values per gene
keep_genes.aggr <- Matrix::rowSums(nonzero.aggr) >= 10

# Only keeping those genes expressed in more than 10 cells
filtered_counts.aggr <- counts.aggr[keep_genes.aggr, ]

# Reassign to filtered Seurat object
aggr.filt <- CreateSeuratObject(filtered_counts.aggr, meta.data = aggr.filt@meta.data)

# check number of cells in aggr.filt
## neg=479 pos=395 uni=253 total=1,127/4,577 (~25% of cells pass)
table(aggr.filt@active.ident)

# check QC metrics for aggr.filt by population
VlnPlot(aggr.filt, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.rp"), ncol = 4, pt.size = 0.3)

# Create .RData object to load at any time
save(aggr.filt, file="aggr.filt.RData")

# add MT and RP metadata to aggr.filt object
aggr.filt <- PercentageFeatureSet(aggr.filt, pattern = "^MT-", col.name = "percent.mt")
aggr.filt <- PercentageFeatureSet(aggr.filt, pattern = "^RP", col.name = "percent.rp")

# run sctransform
aggr.filt <- SCTransform(aggr.filt, vars.to.regress = c("percent.mt","nUMI"), verbose = FALSE, variable.features.n = 4000)

# run pca and plot
aggr.filt <- RunPCA(aggr.filt, verbose = FALSE)
DimPlot(aggr.filt, reduction = "pca", group.by = 'orig.ident')

# show features driving pca
print(aggr.filt[["pca"]], dims = 1:2, nfeatures = 5)
DimHeatmap(aggr.filt, dims = 1:5, balanced = TRUE)

# run umap with 40 dims
aggr.filt <- RunUMAP(aggr.filt, dims = 1:40, verbose = FALSE)
aggr.filt <- RunTSNE(aggr.filt, dims = 1:40, verbose = FALSE)

# find clusters and plot
aggr.filt <- FindNeighbors(aggr.filt, dims = 1:40, verbose = FALSE)
aggr.filt <- FindClusters(aggr.filt, verbose = FALSE)
DimPlot(aggr.filt, reduction = 'umap')
DimPlot(aggr.filt, reduction = 'umap', group.by = 'orig.ident')

# Check clusters for noise
# Determine metrics to plot present in aggr.filt@meta.data
metrics <-  c("percent.mt", "percent.rp", "nUMI", "nGene")

FeaturePlot(aggr.filt, 
            reduction = "umap", 
            features = metrics,
            pt.size = 0.4, 
            order = TRUE,
            min.cutoff = 'q10',
            label = TRUE)

# find markers for every cluster compared to all remaining cells, report only the positive ones
aggr.markers <- FindAllMarkers(aggr.filt, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 1.0)

# plot the top 10 marker genes per cluster
aggr.top10 <- aggr.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
DoHeatmap(aggr.filt, features = aggr.top10$gene, label = FALSE)

# plot the top 50 marker genes per cluster
aggr.top50 <- aggr.markers %>% group_by(cluster) %>% top_n(n = 50, wt = avg_logFC)
DoHeatmap(aggr.filt, features = aggr.top50$gene, label = TRUE)

# create a list of M1 markers
m1.markers <- c("CD86", "CD68", "CD80", "CD14", "CD16", "TNF", "IL1B", "IL6", "IL8", "IL12A", "IL17A", "IL23", "CCL2", "CCL3", "CCL4", "CCL5", "CCL8", "CCL9", "CCL10", "CCL11", "TLR2", "TLR4", "NOS2", "JUN", "HIF1A", "STAT1", "CXCL10", "PKM", "CSF2", "IFNA1", "IFNG", "IL1A", "ICAM1", "SELE", "SELP")

# create a list of M2 markers
m2.markers <- c("CD14", "CD16", "IL4", "IL13", "IL10", "IDO1", "TGM2", "CD163", "CD206", "CCL18", "VEGFA", "SOCS1", "NFKB1", "GLUL", "TGFB1", "IL1RN")

# create a list of pro-apoptosis markers
apo.markers <- c("CYCS", "BCL2", "BAX", "CASP9", "CASP8", "CASP2", "CASP3", "CASP6", "CASP7", "CASP10", "TP53", "PARP1")

# plot heatmap by population type
DoHeatmap(aggr.filt, features = m1.markers, group.by = "seq_folder", label = FALSE)
