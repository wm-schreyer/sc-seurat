##GFP-/UNI
neg_uni.object <- merge(neg.object, y = c(uni.object), add.cell.ids = c("neg", "uni"), project = "neg_uni")
neg_uni.object

# calculate percentage of total transcripts from mt-genes
neg_uni.object[["percent.mt"]] <- PercentageFeatureSet(neg_uni.object, pattern = "^MT")

# calculate percentage of total transcripts from rp-genes
neg_uni.object[["percent.rp"]] <- PercentageFeatureSet(neg_uni.object, pattern = "^RP")

# visualize QC metrics as a violin plot
VlnPlot(neg_uni.object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.rp"), ncol = 4, pt.size = 0.5)

# create metadata for aggr object
neg_uni.object$log10GenesPerUMI <- log10(neg_uni.object$nFeature_RNA) / log10(neg_uni.object$nCount_RNA)

#create metadata data frame
metadata.neg_uni <- neg_uni.object@meta.data

# add cell IDs to metadata
metadata.neg_uni$cells <- rownames(metadata.neg_uni)

# rename columns
metadata.neg_uni <- metadata.neg_uni %>%
  dplyr::rename(seq_folder = orig.ident,
                nUMI = nCount_RNA,
                nGene = nFeature_RNA)

# Add metadata back to Seurat object
neg_uni.object@meta.data <- metadata.neg_uni

# Filter out low quality reads using selected thresholds - nGene filter sets min for unique features and UMI counts
neg_uni.filt <- subset(x = neg_uni.object, 
                       subset = (nGene >= 1000) & 
                         (log10GenesPerUMI > 0.80) & 
                         (percent.mt < 15))

# Output a logical vector for every gene on whether the more than zero counts per cell
# Extract counts
counts.neg_uni <- GetAssayData(object = neg_uni.filt, slot = "counts")

# Output a logical vector for every gene on whether the more than zero counts per cell
nonzero.neg_uni <- counts.neg_uni > 0

# Sums all TRUE values and returns TRUE if more than 10 TRUE values per gene
keep_genes.neg_uni <- Matrix::rowSums(nonzero) >= 10

# Only keeping those genes expressed in more than 10 cells
filtered_counts.neg_uni <- counts.neg_uni[keep_genes, ]

# Reassign to filtered Seurat object
neg_uni.filt <- CreateSeuratObject(filtered_counts.neg_uni, meta.data = neg_uni.filt@meta.data)

# check number of cells in neg_uni.filt
# neg=434 pos=347 uni=217 total=998 (no nGene filter, ~22% of cells pass)
table(aggr.filt@active.ident)

# check QC metrics for neg_uni.filt by population
VlnPlot(neg_uni.filt, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.rp"), ncol = 4, pt.size = 0.3)

# Create .RData object to load at any time
save(neg_uni.filt, file="neg_uni.filt.RData")

# run sctransform
neg_uni.filt <- SCTransform(neg_uni.filt, vars.to.regress = c("percent.mt","nUMI"), verbose = FALSE)

# run pca and plot
neg_uni.filt <- RunPCA(neg_uni.filt, verbose = FALSE)
DimPlot(neg_uni.filt, reduction = "pca", group.by = 'orig.ident')

# run umap with 40 dims
neg_uni.filt <- RunUMAP(neg_uni.filt, dims = 1:40, verbose = FALSE)

# find clusters and plot
neg_uni.filt <- FindNeighbors(neg_uni.filt, dims = 1:40, verbose = FALSE)
neg_uni.filt <- FindClusters(neg_uni.filt, verbose = FALSE)
DimPlot(neg_uni.filt, label = TRUE)
DimPlot(neg_uni.filt, reduction = 'umap', group.by = 'orig.ident')

FeaturePlot(neg_uni.filt, 
            reduction = "umap", 
            features = metrics,
            pt.size = 0.4, 
            order = TRUE,
            min.cutoff = 'q10',
            label = TRUE)
